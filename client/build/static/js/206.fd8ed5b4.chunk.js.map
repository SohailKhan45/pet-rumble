{"version":3,"file":"static/js/206.fd8ed5b4.chunk.js","mappings":"6j/HAcA,MA0GA,EA1GoBA,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,GAkD/C,OACEK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,KACLJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yBACsB,KACvBF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACC,GAAI,iBAAkBL,UAAU,aAAYC,SAAA,CAC/C,IAAI,cAEC,QAEVF,EAAAA,EAAAA,MAAA,QAAMO,SAAWC,GA7DJC,WAEnB,GADAD,EAAEE,iBACY,KAAVjB,GAA6B,KAAbG,EAClB,OAAOe,EAAAA,GAAMC,KAAK,4BAEpB,GAAKnB,EAAMoB,MAAM,8BAIjB,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,GAAS,QAAS,CAAEtB,QAAOG,aACrB,OAAzBkB,EAASE,KAAKC,OAChB1B,EAAS,YAEToB,EAAAA,GAAMC,KAAKE,EAASE,KAAKE,QAE7B,CAAE,MAAOC,GACPR,EAAAA,GAAMQ,MAAMA,EAAMD,QACpB,MAZEP,EAAAA,GAAMQ,MAAM,sCAYd,EA2C6BC,CAAaZ,GAAGN,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,KAAA,SACEkB,KAAK,QACLC,KAAK,QACLC,MAAO9B,EACP+B,SAAWhB,GAAMd,EAASc,EAAEiB,OAAOF,OACnCG,YAAY,aAGhB1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEkB,KAAMvB,EAAc,OAAS,WAC7BwB,KAAK,MACLC,MAAO3B,EACP4B,SAAWhB,GAAMX,EAAYW,EAAEiB,OAAOF,OACtCG,YAAY,cAEdvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAYC,SAAQ,CAACL,MAAO,CAAEtB,UAAW,aAAcC,UACtDC,EAAAA,EAAAA,KAAA,QAAM0B,QA3DAC,IAAM/B,GAAgBD,GA2DDI,SACxBJ,GAAcK,EAAAA,EAAAA,KAAC4B,EAAAA,IAAQ,KAAM5B,EAAAA,EAAAA,KAAC6B,EAAAA,IAAa,YAIlDhC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAM0B,QA/DGpB,UACnB,GAAKhB,EAIL,GAAKA,EAAMoB,MAAM,8BAIjB,IAMsB,kBALGE,EAAAA,EAAAA,GAAS,QAAS,CACvCtB,QACAG,SAAU,OAEQoB,KACXC,OACP1B,EAAS,0BAA2B,CAAE0C,MAAOxC,IAE7CkB,EAAAA,GAAMC,KAAK,mBAEf,CAAE,MAAOsB,GACPvB,EAAAA,GAAMQ,MAAMe,EAAIhB,QAClB,MAhBEP,EAAAA,GAAMQ,MAAM,4CAJZR,EAAAA,GAAMC,KAAK,gCAoBb,EAyCsCV,SAAC,sBAC7BC,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAACd,KAAK,SAASe,KAAK,oBAIjCjC,EAAAA,EAAAA,KAACkC,IAAM,CACLpC,UAAU,kBACVqC,cAAeC,EACfC,MAAM,SAGN,C","sources":["pages/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { FaRegEye, FaRegEyeSlash } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport \"../index.css\";\nimport \"../styles/login.css\";\nimport { postData } from \"../utils/api\";\nimport Base from \"../components/Base\";\nimport Button from \"../components/Button\";\nimport Lottie from \"lottie-react\";\nimport catAnimation from \"../assets/animations/cat animation.json\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst LandingPage = () => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (email === \"\" || password === \"\") {\n      return toast.warn(\"All fields are required!\");\n    }\n    if (!email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      toast.error(\"Please enter a valid email address.\");\n      return;\n    }\n    try {\n      const response = await postData(\"login\", { email, password });\n      if (response.data.status === \"ok\") {\n        navigate(\"/Profile\");\n      } else {\n        toast.warn(response.data.message);\n      }\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const handleClick = () => setIsRevealPwd(!isRevealPwd);\n\n  const handleForgot = async (e) => {\n    if (!email) {\n      toast.warn(\"Please enter the email first.\");\n      return;\n    }\n    if (!email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      toast.error(\"Please enter a valid email address.\");\n      return;\n    }\n    try {\n      const response = await postData(\"login\", {\n        email,\n        password: \" \",\n      });\n      let data = response.data;\n      if (data.status === \"forgot\") {\n        navigate(\"/verify/OTPverification\", { state: email });\n      } else {\n        toast.warn(\"Email not found.\");\n      }\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n\n  return (\n    <div className=\"login\">\n      <Base />\n      <div className=\"loginContainer\">\n        <div className=\"loginInfo\">\n          <h1>Login</h1>\n          <p>\n            Don't have an account?{\" \"}\n            <Link to={\"/verify/signup\"} className=\"linksColor\">\n              {\" \"}\n              Register\n            </Link>{\" \"}\n          </p>\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"emailContainer\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </div>\n            <div className=\"pwdContainer\">\n              <input\n                type={isRevealPwd ? \"text\" : \"password\"}\n                name=\"pwd\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Password\"\n              />\n              <IconContext.Provider value={{ className: \"revealPwd\" }}>\n                <span onClick={handleClick}>\n                  {isRevealPwd ? <FaRegEye /> : <FaRegEyeSlash />}\n                </span>\n              </IconContext.Provider>\n            </div>\n            <div className=\"secondaryLogin\">\n              <span onClick={handleForgot}>Forgot password?</span>\n              <Button type=\"submit\" text=\"login\" />\n            </div>\n          </form>\n        </div>\n        <Lottie\n          className=\"catIllustration\"\n          animationData={catAnimation}\n          loop={true}\n        />\n      </div>\n    </div>\n  );\n};\nexport default LandingPage;\n"],"names":["LandingPage","navigate","useNavigate","email","setEmail","useState","password","setPassword","isRevealPwd","setIsRevealPwd","_jsxs","className","children","_jsx","Base","Link","to","onSubmit","e","async","preventDefault","toast","warn","match","response","postData","data","status","message","error","handleSubmit","type","name","value","onChange","target","placeholder","IconContext","Provider","onClick","handleClick","FaRegEye","FaRegEyeSlash","state","err","Button","text","Lottie","animationData","catAnimation","loop"],"sourceRoot":""}