{"version":3,"file":"static/js/158.16ecff94.chunk.js","mappings":"oPAaA,MAyFA,EAzFuBA,KACrB,MACMC,GADWC,EAAAA,EAAAA,MACMC,MACjBC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,IACxCK,EAAkBC,IAAuBN,EAAAA,EAAAA,WAAS,GAmCzD,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,KACLJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,aAAYC,SAAC,yBAC3BF,EAAAA,EAAAA,MAAA,QAAMK,SAtCSC,UAEnB,GADAC,EAAEC,iBAECjB,EAASkB,MACR,0EASJ,GAAIlB,IAAaG,EAKjB,IACE,MAAMgB,QAAiBC,EAAAA,EAAAA,GAAS,gBAAiB,CAC/CzB,QACAK,aAEIqB,QAAaF,EAASE,KACR,OAAhBA,EAAKC,QACPC,EAAAA,GAAMC,QAAQH,EAAKI,SACnB3B,EAAS,aACJyB,EAAAA,GAAMG,MAAML,EAAKI,QAC1B,CAAE,MAAOE,GACPJ,EAAAA,GAAMG,MAAMC,EAAIF,QAClB,MAhBEF,EAAAA,GAAMG,MAAM,6CAPZH,EAAAA,GAAMG,MACJ,sGAsBJ,EAQkChB,UAAU,kBAAiBC,SAAA,EACvDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,SACEgB,UAAQ,EACRC,MAAO7B,EACP8B,SAAWd,GAAMf,EAAYe,EAAEe,OAAOF,OACtCnB,UAAU,mBACVsB,YAAY,qBACZC,KAAM5B,EAAc,OAAS,cAE/BO,EAAAA,EAAAA,KAACsB,EAAAA,GAAYC,SAAQ,CAACN,MAAO,CAAEnB,UAAW,WAAYC,UACpDC,EAAAA,EAAAA,KAAA,QAAMwB,QAASA,IAAM9B,GAAgB+B,IAAeA,IAAW1B,SAC5DN,GAAcO,EAAAA,EAAAA,KAAC0B,EAAAA,IAAQ,KAAM1B,EAAAA,EAAAA,KAAC2B,EAAAA,IAAa,YAIlD9B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,SACEgB,UAAQ,EACRC,MAAO1B,EACP2B,SAAWd,GAAMZ,EAAmBY,EAAEe,OAAOF,OAC7CnB,UAAU,mBACVsB,YAAY,oBACZC,KAAM1B,EAAmB,OAAS,cAEpCK,EAAAA,EAAAA,KAACsB,EAAAA,GAAYC,SAAQ,CAACN,MAAO,CAAEnB,UAAW,WAAYC,UACpDC,EAAAA,EAAAA,KAAA,QACEwB,QAASA,IAAM5B,GAAqB6B,IAAeA,IAAW1B,SAE7DJ,GAAmBK,EAAAA,EAAAA,KAAC0B,EAAAA,IAAQ,KAAM1B,EAAAA,EAAAA,KAAC2B,EAAAA,IAAa,YAIvD3B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,UACrBC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,CAACP,KAAK,SAASQ,KAAK,mBAI7B,C","sources":["pages/ChangePassword.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\nimport React, { useState } from \"react\";\nimport Base from \"../components/Base\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { FaRegEye, FaRegEyeSlash } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport \"../styles/resetPassword.css\";\nimport \"../styles/login.css\";\nimport Button from \"../components/Button\";\nimport { postData } from \"../utils/api\";\n\nconst ChangePassword = () => {\n  const location = useLocation();\n  const email = location.state;\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n  const [isRevealResetPwd, setIsRevealResetPwd] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (\n      !password.match(\n        /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/-]{8,20}$/\n      )\n    ) {\n      toast.error(\n        \"Password must have length between 8-20 characters and must contain atleast 1 alphabet and 1 number.\"\n      );\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast.error(\"Password doesn't match. Please check\");\n      return;\n    }\n\n    try {\n      const response = await postData(\"resetPassword\", {\n        email,\n        password,\n      });\n      const data = await response.data;\n      if (data.status === \"ok\") {\n        toast.success(data.message);\n        navigate(\"/Profile\");\n      } else toast.error(data.message);\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n\n  return (\n    <div className=\"resetPasswordWrapper\">\n      <Base />\n      <div className=\"OTP\">\n        <h2 className=\"OTPHeading\">Create new password</h2>\n        <form onSubmit={handleSubmit} className=\"newPasswordForm\">\n          <div className=\"pwdBox\">\n            <input\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"newPasswordInput\"\n              placeholder=\"Enter new password\"\n              type={isRevealPwd ? \"text\" : \"password\"}\n            />\n            <IconContext.Provider value={{ className: \" newPwd\" }}>\n              <span onClick={() => setIsRevealPwd((prevState) => !prevState)}>\n                {isRevealPwd ? <FaRegEye /> : <FaRegEyeSlash />}\n              </span>\n            </IconContext.Provider>\n          </div>\n          <div className=\"pwdBox\">\n            <input\n              required\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              className=\"newPasswordInput\"\n              placeholder=\"Re-enter password\"\n              type={isRevealResetPwd ? \"text\" : \"password\"}\n            />\n            <IconContext.Provider value={{ className: \" newPwd\" }}>\n              <span\n                onClick={() => setIsRevealResetPwd((prevState) => !prevState)}\n              >\n                {isRevealResetPwd ? <FaRegEye /> : <FaRegEyeSlash />}\n              </span>\n            </IconContext.Provider>\n          </div>\n          <div className=\"OTPBtn\">\n            <Button type=\"submit\" text=\"Save\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n"],"names":["ChangePassword","email","useLocation","state","navigate","useNavigate","password","setPassword","useState","confirmPassword","setConfirmPassword","isRevealPwd","setIsRevealPwd","isRevealResetPwd","setIsRevealResetPwd","_jsxs","className","children","_jsx","Base","onSubmit","async","e","preventDefault","match","response","postData","data","status","toast","success","message","error","err","required","value","onChange","target","placeholder","type","IconContext","Provider","onClick","prevState","FaRegEye","FaRegEyeSlash","Button","text"],"sourceRoot":""}