{"version":3,"file":"static/js/762.c73b31d2.chunk.js","mappings":"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","sources":["pages/Contact.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport loginPhoto from \"../assets/images/loginPhoto.png\";\nimport emailjs from \"@emailjs/browser\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../styles/contact.css\";\nimport { getData } from \"../utils/api\";\n\nexport default function Contact() {\n  const form = useRef();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [button, setButton] = useState(\"Send Message\");\n  const [authorized, setAuthorized] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await getData(\"\");\n        let data = response.data;\n\n        if (data.status === \"ok\") {\n          setAuthorized(true);\n        } else {\n          setAuthorized(false);\n        }\n      } catch (err) {\n        toast.error(err);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleOnChange = (e) => {\n    setText(e.target.value);\n    const textarea = document.querySelector(\"textarea\");\n    textarea.addEventListener(\"keydown\", (e) => {\n      textarea.style.height = \"auto\";\n      var scHeight = e.target.scrollHeight;\n      textarea.style.height = `${scHeight}px`;\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setButton(\"Sending\");\n    emailjs\n      .sendForm(\n        process.env.REACT_APP_SERVICE_ID,\n        process.env.REACT_APP_TEMPLATE_ID,\n        form.current,\n        process.env.REACT_APP_PUBLIC_API_KEY\n      )\n      .then(\n        (result) => {\n          console.log(result.text);\n          setButton(\"Send Message\");\n          setName(\"\");\n          setEmail(\"\");\n          setText(\"\");\n          toast.success(\"Message successfully sent!\");\n        },\n        (error) => {\n          toast.error(\"Message not sent, try again later.\");\n          setButton(\"Send Message\");\n        }\n      );\n  };\n\n  return (\n    <>\n      {authorized ? <Navbar /> : <></>}\n\n      <div className=\"contactWindow\">\n        <div className=\"contactContainer\">\n          <form\n            ref={form}\n            onSubmit={(e) => handleSubmit(e)}\n            className=\"contactWrapperRight\"\n          >\n            <h1>Contact Us</h1>\n            <input\n              id=\"name\"\n              type=\"text\"\n              name=\"Name\"\n              value={name}\n              placeholder=\"Full Name\"\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n            <input\n              id=\"email\"\n              type=\"email\"\n              name=\"Email\"\n              value={email}\n              placeholder=\"Email ID\"\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            ></input>\n            <textarea\n              id=\"message\"\n              name=\"Message\"\n              value={text}\n              placeholder=\"Message\"\n              rows=\"2\"\n              onChange={handleOnChange}\n              required\n            >\n              {text}\n            </textarea>\n            <button id=\"submitBtn\" type=\"submit\">\n              {button}\n            </button>\n          </form>\n          <img\n            src={loginPhoto}\n            alt=\"My Pet\"\n            className=\"contactWrapperLeft\"\n            loading=\"lazy\"\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.12.1',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.12.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n"],"names":["Contact","form","useRef","name","setName","useState","email","setEmail","text","setText","button","setButton","authorized","setAuthorized","useEffect","async","getData","data","status","err","toast","error","fetchData","_jsxs","_Fragment","children","_jsx","Navbar","className","ref","onSubmit","e","preventDefault","emailjs","process","current","then","result","console","log","success","handleSubmit","id","type","value","placeholder","onChange","target","required","rows","textarea","document","querySelector","addEventListener","style","height","scHeight","scrollHeight","concat","src","loginPhoto","alt","loading","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","responseText","sendPost","url","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","_ref","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","init","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","currentForm","nodeName","findHTMLForm","formData","FormData","append"],"sourceRoot":""}