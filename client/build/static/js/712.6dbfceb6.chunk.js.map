{"version":3,"file":"static/js/712.6dbfceb6.chunk.js","mappings":"mNAQA,MAmFA,EAnFoBA,IAAsC,IAArC,OAAEC,EAAM,WAAEC,EAAU,QAAEC,GAASH,EAClD,MAAMI,GAAWC,EAAAA,EAAAA,OACVC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAKC,IAAUJ,EAAAA,EAAAA,UAAS,KACxBK,EAAYC,IAAiBN,EAAAA,EAAAA,WAAS,IAE7CO,EAAAA,EAAAA,YAAU,KACgBC,WACtB,IAIE,IAAIC,SAHmBC,EAAAA,EAAAA,GAAS,WAAY,CAC1CjB,YAEkBgB,KACA,OAAhBA,EAAKE,SACPZ,EAAQU,EAAKG,UAAUd,MACvBI,EAASO,EAAKG,UAAUX,OACxBG,EAAOK,EAAKG,UAAUT,KAE1B,CAAE,MAAOU,GAGP,OAFAC,QAAQC,IAAIF,QACZG,EAAAA,GAAMC,MAAM,gDAEd,GAEFC,EAAiB,GAChB,CAACzB,IA0BJ,OACE0B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAoBC,QAzBjBC,KAClB1B,EAAS,YAAcH,EAAO,EAwB0B8B,SAAA,EACtDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,iCAAgCG,SAC5CtB,GACCuB,EAAAA,EAAAA,KAAA,OACEJ,UAAU,wBACVK,IAAKxB,EACLyB,IAAI,SACJC,QAAQ,UAGVH,EAAAA,EAAAA,KAACI,EAAAA,IAAS,CAACR,UAAU,0BAGzBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKzB,KACL0B,EAAAA,EAAAA,KAAA,KAAAD,SAAIpB,WAGRqB,EAAAA,EAAAA,KAAA,UACEH,QAzCeb,UACnBqB,EAAEC,kBACFxB,GAAc,GAEd,IAKsB,cAJGI,EAAAA,EAAAA,GAAS,eAAgB,CAC9CqB,SAAUtC,KAEQgB,KACXE,SACPK,EAAAA,GAAMgB,QAAQ,yBACdtC,GAAYC,GAEhB,CAAE,MAAOkB,GAGP,OAFAG,EAAAA,GAAMC,MAAM,yDACZX,GAAc,EAEhB,GAyBIc,UAAU,kBACVa,SAAU5B,EAAWkB,SAEpBlB,EAAa,cAAgB,aAE5B,E,cC7EH,MAAM6B,EAAUA,KACrB,MAAOC,EAASC,IAAcpC,EAAAA,EAAAA,UAAS,OAChCL,EAASD,IAAcM,EAAAA,EAAAA,WAAS,IAChC2B,EAASU,IAAcrC,EAAAA,EAAAA,WAAS,GACjCJ,GAAWC,EAAAA,EAAAA,MAmBjB,OAjBAU,EAAAA,EAAAA,YAAU,KACaC,WAEnB,IAAIC,SADmBC,EAAAA,EAAAA,GAAS,YACZD,KACpB,GAAoB,OAAhBA,EAAKE,OAOP,OAFAK,EAAAA,GAAMC,MAAM,4BACZrB,EAAS,iBALTa,QAAaA,EAAK0B,QAClBC,EAAW3B,GACX4B,GAAW,EAKb,EAEFC,EAAc,GACb,CAAC3C,KAGF6B,EAAAA,EAAAA,KAAAe,EAAAA,SAAA,CAAAhB,UACEJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBG,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,uBAAsBG,SAClCI,GACCH,EAAAA,EAAAA,KAAAe,EAAAA,SAAA,CAAAhB,SACGiB,MAAMC,KAAK,CAAEC,OAAQ,IAAKC,KAAI,KAC7BnB,EAAAA,EAAAA,KAACoB,EAAAA,GAAkB,SAIvBpB,EAAAA,EAAAA,KAAAe,EAAAA,SAAA,CAAAhB,UACU,OAAPY,QAAO,IAAPA,OAAO,EAAPA,EAASO,QAAS,EACjBP,EAAQQ,KAAKE,IACXrB,EAAAA,EAAAA,KAACsB,EAAW,CAEVrD,OAAQoD,EACRnD,WAAYA,EACZC,QAASA,GAHJkD,MAOT1B,EAAAA,EAAAA,MAAA,KAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAM,qEAQjB,EAIP,G","sources":["components/FriendsCard.js","pages/Friends.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/friends.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { PiDogFill } from \"react-icons/pi\";\nimport { postData } from \"../utils/api\";\n\nconst FriendsCard = ({ userID, setRefresh, refresh }) => {\n  const navigate = useNavigate();\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [bio, setBio] = useState(\"\");\n  const [isRemoving, setIsRemoving] = useState(false);\n\n  useEffect(() => {\n    const fetchFriendData = async () => {\n      try {\n        const response = await postData(\"userdata\", {\n          userID,\n        });\n        let data = response.data;\n        if (data.status === \"ok\") {\n          setName(data.foundUser.name);\n          setImage(data.foundUser.image);\n          setBio(data.foundUser.bio);\n        }\n      } catch (err) {\n        console.log(err);\n        toast.error(\"There was an error. Kindly referesh the page.\");\n        return;\n      }\n    };\n    fetchFriendData();\n  }, [userID]);\n\n  const handleClick = () => {\n    navigate(\"/Profile/\" + userID);\n  };\n\n  const handleRemove = async (e) => {\n    e.stopPropagation();\n    setIsRemoving(true);\n\n    try {\n      const response = await postData(\"removeFriend\", {\n        friendID: userID,\n      });\n      let data = response.data;\n      if (data.status === \"ok\") {\n        toast.success(\"Successfully removed.\");\n        setRefresh(!refresh);\n      }\n    } catch (err) {\n      toast.error(\"There was an error while performing this action.\");\n      setIsRemoving(false);\n      return;\n    }\n  };\n\n  return (\n    <div className=\"friendCardWrapper\" onClick={handleClick}>\n      <div className=\"friendsInfoContainer\">\n        <div className=\"friendsProfilePictureContainer\">\n          {image ? (\n            <img\n              className=\"friendsProfilePicture\"\n              src={image}\n              alt=\"Friend\"\n              loading=\"lazy\"\n            />\n          ) : (\n            <PiDogFill className=\"friendsProfileIcon\" />\n          )}\n        </div>\n        <div className=\"friendsInfo\">\n          <h3>{name}</h3>\n          <p>{bio}</p>\n        </div>\n      </div>\n      <button\n        onClick={handleRemove}\n        className=\"removeFriendBtn\"\n        disabled={isRemoving}\n      >\n        {isRemoving ? \"Removing...\" : \"Remove\"}\n      </button>\n    </div>\n  );\n};\n\nexport default FriendsCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport FriendsCard from \"../components/FriendsCard\";\nimport \"../styles/friends.css\";\nimport { FriendCardSkeleton } from \"../utils/skeleton\";\nimport { toast } from \"react-toastify\";\nimport { postData } from \"../utils/api\";\n\nexport const Friends = () => {\n  const [friends, setFriends] = useState(null);\n  const [refresh, setRefresh] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchFriends = async () => {\n      const response = await postData(\"friends\");\n      let data = response.data;\n      if (data.status === \"ok\") {\n        data = await data.friends;\n        setFriends(data);\n        setLoading(false);\n      } else {\n        toast.error(\"Kindly login first!\");\n        navigate(\"/verify/login\");\n        return;\n      }\n    };\n    fetchFriends();\n  }, [refresh]);\n\n  return (\n    <>\n      <div className=\"friendsWrapper\">\n        <h1>My Friends</h1>\n        <div className=\"friendsCardContainer\">\n          {loading ? (\n            <>\n              {Array.from({ length: 7 }).map(() => (\n                <FriendCardSkeleton />\n              ))}\n            </>\n          ) : (\n            <>\n              {friends?.length > 0 ? (\n                friends.map((friend) => (\n                  <FriendsCard\n                    key={friend}\n                    userID={friend}\n                    setRefresh={setRefresh}\n                    refresh={refresh}\n                  />\n                ))\n              ) : (\n                <p>\n                  <br />\n                  Connect to people through explore page to view friends.\n                </p>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Friends;\n"],"names":["_ref","userID","setRefresh","refresh","navigate","useNavigate","name","setName","useState","image","setImage","bio","setBio","isRemoving","setIsRemoving","useEffect","async","data","postData","status","foundUser","err","console","log","toast","error","fetchFriendData","_jsxs","className","onClick","handleClick","children","_jsx","src","alt","loading","PiDogFill","e","stopPropagation","friendID","success","disabled","Friends","friends","setFriends","setLoading","fetchFriends","_Fragment","Array","from","length","map","FriendCardSkeleton","friend","FriendsCard"],"sourceRoot":""}